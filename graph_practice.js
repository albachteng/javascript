// this code was generated by following along with the Fireship.io JavaScript course

// nodes - the airports themselves, which I just assigned nonsense letters
const airports = 'ABC DEF GHI JKL MNO PQR STU VWX YZA'.split(' ');
console.log(airports);

// edges - each array indicates a connecting 'flight'
const routes = [
    ['ABC', 'DEF'],
    ['ABC', 'GHI'],
    ['ABC', 'JKL'],
    ['DEF', 'JKL'],
    ['MNO', 'STU'],
    ['PQR', 'VWX'],
    ['YZA', 'GHI'],
    ['YZA', 'STU'],
    ['VWX', 'JKL'],
];
console.log(routes);

// initialize adjacencyList as empty Map
const adjacencyList = new Map(); 

// add Node to our adjacency list with empty list of edges
function addNode(airport) {
    adjacencyList.set(airport, []);
}

// add an edge to two predefined nodes
function addEdge(origin, destination) {
    adjacencyList.get(origin).push(destination);
    adjacencyList.get(destination).push(origin);
}

// construct adjacencyList
airports.forEach(addNode);
routes.forEach(route => addEdge(...route));
console.log(adjacencyList); 

// Breadth-first search ('BFS') 
// this could be improved by simply replacing "VWX" with a new argument: 'end'
function bfs(start) {
    const visited = new Set();
    const queue = [start];

    while (queue.length > 0) {
        const airport = queue.shift();
        const destinations = adjacencyList.get(airport);

        for (const destination of destinations) {

            if (destination === 'VWX') {
                console.log('found it!')
            }
            if (!visited.has(destination)) {
                visited.add(destination);
                queue.push(destination);
                console.log(destination);
            }
        }
    }
}

bfs('ABC');

// depth-first search 

let steps = 0;

function dfs(start, visited = new Set()) {
    console.log(start);
    visited.add(start);
    const destinations = adjacencyList.get(start);
    steps++;

    for (const destination of destinations) {
        if (destination === 'YZA') {
            console.log(`found in ${steps} steps!`)
            return;
        }
        if (!visited.has(destination)) {
            dfs(destination, visited);
        }
    }
}

dfs('DEF');